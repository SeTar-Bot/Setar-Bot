import Cache from "node-cache";
import { CacheConfig } from "./default.js";

/**
 * Cache
 * @description an easy-to-use Cache Manger based on [node-cache]{@link https://npmjs.com/node-cache}
 * @class
 */
class CacheManager {

    /**
     * Event handler callback
     * @callback eventHandler
     * @param {Cache} client the default and original [node-cache]{@link https://npmjs.com/node-cache} module
     * @param {...any} args whatever the [node-cache]{@link https://npmjs.com/node-cache} returns in the event callback
     */
    
    /**
     * Cache Client Config
     * @private
     * @type {Object}
     */
    #Config = CacheConfig;

    /**
     * Cache Client
     * @private
     * @type {Cache}
     */
    #Client;

    /**
     * Get all the keys 
     * @returns {Array} Array of All Keys and Values
     * @readonly
     */
    get All()
    {
        return this.#Client.keys();
    }

    /**
     * Get Cache Stats
     * @returns {Object} All stats of cache in object
     * @readonly
     */
    get Stats()
    {
        return this.#Client.getStats();
    }

    /**
     * @param {Object} CacheConfig Config and Settings for [node-cache]{@link https://npmjs.com/node-cache}
     */
    constructor(CacheConfig = this.#Config)
    {
        //Setup Client
        this.#Client = new Cache();
    }

    /**
     * @param {String} arg Reset 'stats' or 'data' or 'all'
     * @description reset any data or stats from cache
     * @example Reset('all'); 
     * @example Reset('data');
     * @example Reset('stats');
     */
    Reset(arg = 'all')
    {
        if(arg == 'all')
        {
            this.#Client.flushAll();
            this.#Client.flushStats();
        }
        else if(arg == 'stats')
            this.#Client.flushStats();
        else if(arg == 'data')
            this.#Client.flushAll();
    }

    /**
     * @param {String} key key you want to check if it exist
     * @returns {Boolean} True of false if the key exist
     * @description Check if key exist in cache
     * @example Exist('key-1');
     */
    Exist(key)
    {
        return this.#Client.has(key);
    }

    /**
     * @param  {...String} args keys you want to get the value of them
     * @returns {any} anything you saved for the keys
     * @description Get values of key(s)
     * @example Get('key-1', 'key-2', 'key-3', ....);
     */
    Get(...args)
    {
        if([...args].length === 1)
            return this.#Client.get([...args][0])
        else
            return this.#Client.mget([...args]);
    }

    /**
     * @param {String} key key that is saved on cache
     * @returns {Boolean | undefined | Number | Date} returns Number/Date or undefined if it doesn't exist
     * @description Get the Time to live of a key
     * @example GetT2L('key');
     */
    GetT2L(key)
    {
        return this.#Client.getTtl(key);
    }

    /**
     * @param  {...any} args keys and values you want to set
     * @returns {Boolean} true or false if it has been set
     * @description Set keys and values to Cache
     * @example Set('key-1', 'value-1', 'key-2', 'value-2', .....);
     */
    Set(...args)
    {
        if([...args].length === 2)
            return this.#Client.set([...args][0], [...args][1]);
        else if([...args].length > 2)
            return this.#Client.mset([...args]);
        else
            throw new Error("atleast 2 arguments are required.");
    }

    /**
     * @param {String} arg key to delete and return
     * @returns {any} anything you saved for the key
     * @description Removes the key and value from cache and returns it
     * @example TakeOut('key-1');
     */
    TakeOut(arg)
    {
        return this.#Client.take(arg)
    }

    /**
     * @param  {...String} args keys to delete
     * @returns {Number} returns the number of deleted keys/values
     * @description Delete keys and values from cache
     * @example Delete('key-1', 'key-2', 'key-3', ....)
     */
    Delete(...args)
    {
        if([...args].length === 1)
            return this.#Client.del([...args][0])
        else
            return this.#Client.del([...args]);
    }

    /**
     * @param {String} eventName the event name provided by [node-cache]{@link https://npmjs.com/node-cache}
     * @param {eventHandler} handler the event callback
     * @description listen to any events provided by [node-cache]{@link https://npmjs.com/node-cache}
     */
    on(eventName, handler)
    {
        this.#Client.on(eventName, (...args) => handler(this.#Client, ...args));
    }

    /**
     * @param {String} eventName the event name provided by [node-cache]{@link https://npmjs.com/node-cache}
     * @description event name you to stop listening
     * @example UnBind('eventName');
     */
    UnBind(eventName)
    {
        this.#Client.removeAllListeners(eventName);
    }
}

export { CacheManager };