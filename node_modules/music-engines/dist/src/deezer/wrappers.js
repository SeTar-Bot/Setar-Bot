"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeezerPlaylist = exports.DeezerTrack = exports.DeezerArtist = exports.DeezerAlbum = void 0;
const deezer_js_1 = require("@flazepe/deezer.js");
const Base_1 = require("../Base");
const client = new deezer_js_1.Deezer();
class DeezerTrack extends Base_1.Base {
    constructor(data) {
        super('deezer');
        this.raw = data;
        this.id = data.SNG_ID;
        this.title = data.SNG_TITLE;
        this.url = `https://www.deezer.com/us/track/${this.id}`;
        this.picture = `https://e-cdns-images.dzcdn.net/images/cover/${data.ALB_PICTURE}/264x264-000000-80-0-0.jpg`;
        this.duration = this._DurationFormater(Number(data.DURATION), false);
    }
    stream() {
        return client.getAndDecryptTrack(this.raw);
    }
    artists() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            let output = [];
            try {
                for (var _b = __asyncValues(this.raw.ARTISTS), _c; _c = yield _b.next(), !_c.done;) {
                    const artist = _c.value;
                    client.get(artist.ART_ID, 'artist').then(d => {
                        if (d)
                            output.push(new DeezerArtist(d.info));
                    })
                        .catch(reject);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            resolve(output);
        }));
    }
    album() {
        return new Promise((resolve, reject) => {
            client.get(this.raw.ALB_ID, 'album').then(data => {
                resolve(new DeezerAlbum(data));
            })
                .catch(reject);
        });
    }
    _DurationFormater(data, isMs) {
        if (isMs) {
            var ms = data % 1000;
            data = (data - ms) / 1000;
        }
        var secs = data % 60;
        data = (data - secs) / 60;
        var mins = data % 60;
        var hrs = (data - mins) / 60;
        return {
            full: data,
            ms: (isMs) ? data : (data * 1000),
            sec: secs,
            min: mins,
            hour: hrs,
            format: (hrs) ? `${hrs}:${mins}:${secs}` : `${mins}:${secs}`
        };
    }
}
exports.DeezerTrack = DeezerTrack;
class DeezerArtist extends Base_1.Base {
    constructor(data) {
        var _a, _b;
        super("deezer");
        this.raw = data;
        this.id = data.ART_ID;
        this.name = data.ART_NAME;
        this.url = `https://deezer.com/us/artist/${this.id}`;
        this.picture = `https://cdns-images.dzcdn.net/images/artist/${data.ART_PICTURE}/500x500.jpg`;
        this.socials = {
            twitter: (_a = data.TWITTER) !== null && _a !== void 0 ? _a : null,
            facebook: (_b = data.FACEBOOK) !== null && _b !== void 0 ? _b : null,
        };
    }
    tracks() {
        return new Promise((resolve, reject) => {
            client.get(this.id, 'artist').then((d) => __awaiter(this, void 0, void 0, function* () {
                var e_2, _a;
                if (d) {
                    let output = [];
                    try {
                        for (var _b = __asyncValues(d.tracks), _c; _c = yield _b.next(), !_c.done;) {
                            const x = _c.value;
                            output.push(new DeezerTrack(x));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    resolve(output);
                }
                else
                    reject(new Error(`Result was null.`));
            }))
                .catch(reject);
        });
    }
}
exports.DeezerArtist = DeezerArtist;
class DeezerAlbum extends Base_1.Base {
    constructor(data) {
        super("deezer");
        this.raw = data;
        this.id = data.ABL_ID;
        this.title = data.ALB_TITLE;
        this.url = `https://www.deezer.com/us/album/${this.id}`;
        this.releaseDate = {
            digital: data.DIGITAL_RELEASE_DATE,
            physical: data.PHYSICAL_RELEASE_DATE
        };
        this.available = data.AVAILABLE;
        this.title = data.LABEL_NAME;
        this.picture = `https://e-cdn-images.dzcdn.net/images/cover/${data.ALB_PICTURE}/264x264-000000-80-0-0.jpg`;
    }
    artists() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var e_3, _a;
            let output = [];
            try {
                for (var _b = __asyncValues(this.raw.ARTISTS), _c; _c = yield _b.next(), !_c.done;) {
                    const artist = _c.value;
                    client.get(artist.ART_ID, 'artist').then((d) => __awaiter(this, void 0, void 0, function* () {
                        if (d)
                            output.push(new DeezerArtist(d.info));
                    }))
                        .catch(reject);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            resolve(output);
        }));
    }
    tracks() {
        return new Promise((resolve, reject) => {
            client.get(this.id, 'album').then((d) => __awaiter(this, void 0, void 0, function* () {
                var e_4, _a;
                if (d) {
                    let output = [];
                    try {
                        for (var _b = __asyncValues(d.tracks), _c; _c = yield _b.next(), !_c.done;) {
                            const x = _c.value;
                            output.push(new DeezerTrack(x));
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    resolve(output);
                }
                else
                    reject(new Error(`Result was null.`));
            }))
                .catch(reject);
        });
    }
}
exports.DeezerAlbum = DeezerAlbum;
class DeezerPlaylist extends Base_1.Base {
    constructor(data) {
        super("deezer");
        this.raw = data;
        this.id = data.PLAYLIST_ID;
        this.title = data.TITLE;
        this.description = data.DESCRIPTION;
        this.size = data.NB_SONG;
        this.picture = `https://e-cdns-images.dzcdn.net/images/${data.PICTURE_TYPE}/${data.PLAYLIST_PICTURE}/200x200-000000-80-0-0.jpg`;
        this.url = `https://www.deezer.com/us/playlist/${this.id}`;
    }
    publisher() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var e_5, _a;
            if (!this.raw.HAS_ARTIST_LINKED)
                resolve([]);
            let output = [];
            try {
                for (var _b = __asyncValues(this.raw.PLAYLIST_LINKED_ARTIST), _c; _c = yield _b.next(), !_c.done;) {
                    const artist = _c.value;
                    client.get(artist.ART_ID, 'artist').then(d => {
                        if (d)
                            output.push(new DeezerArtist(d.info));
                    })
                        .catch(reject);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            resolve(output);
        }));
    }
    tracks() {
        return new Promise((resolve, reject) => {
            client.get(this.id, 'playlist').then((d) => __awaiter(this, void 0, void 0, function* () {
                var e_6, _a;
                if (d) {
                    let output = [];
                    try {
                        for (var _b = __asyncValues(d.tracks), _c; _c = yield _b.next(), !_c.done;) {
                            const x = _c.value;
                            output.push(new DeezerTrack(x));
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    resolve(output);
                }
                else
                    reject(new Error(`Result was null.`));
            }))
                .catch(reject);
        });
    }
}
exports.DeezerPlaylist = DeezerPlaylist;
