"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeezerWrappers = exports.Deezer = void 0;
const deezer_js_1 = require("@flazepe/deezer.js");
const utils_1 = require("./utils");
const wrappers_1 = require("./wrappers");
class Deezer {
    constructor() {
        this.client = new deezer_js_1.Deezer();
        this.validator = utils_1.DeezerValidator;
        this.extractor = utils_1.DeezerExtractor;
    }
    use(input, type = "track") {
        return new Promise((resolve, reject) => {
            let isValid = this.validator(input), inputType = (isValid) ? "url" : (new RegExp(/^\d+$/g).test(input)) ? 'id' : 'search';
            if (inputType == "url" || inputType == "id") {
                this.client.get(input, type)
                    .then((data) => __awaiter(this, void 0, void 0, function* () {
                    var e_1, _a;
                    if (data) {
                        if (data.type == 'track') {
                            let output = [];
                            try {
                                for (var _b = __asyncValues(data.tracks), _c; _c = yield _b.next(), !_c.done;) {
                                    const x = _c.value;
                                    output.push(new wrappers_1.DeezerTrack(x));
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            resolve(output);
                        }
                        else if (data.type == 'album') {
                            resolve(new wrappers_1.DeezerAlbum(data.info));
                        }
                        else if (data.type == 'playlist') {
                            resolve(new wrappers_1.DeezerPlaylist(data.info));
                        }
                        else if (data.type == 'artist') {
                            resolve(new wrappers_1.DeezerArtist(data.info));
                        }
                    }
                    else
                        reject(new Error(`Couldn't Fetch data from Deezer.`));
                }))
                    .catch(reject);
            }
            else {
                this.client.search(input, type)
                    .then((data) => { var data_1, data_1_1, data_2, data_2_1, data_3, data_3_1, data_4, data_4_1; return __awaiter(this, void 0, void 0, function* () {
                    var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
                    //Artist Wrapper
                    if (type == 'artist') {
                        let tempout = [];
                        try {
                            for (data_1 = __asyncValues(data); data_1_1 = yield data_1.next(), !data_1_1.done;) {
                                const x = data_1_1.value;
                                tempout.push(new wrappers_1.DeezerArtist(x));
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) yield _a.call(data_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        resolve(tempout);
                    }
                    //Album Wrapper
                    else if (type == 'album') {
                        let tempout = [];
                        try {
                            for (data_2 = __asyncValues(data); data_2_1 = yield data_2.next(), !data_2_1.done;) {
                                const x = data_2_1.value;
                                tempout.push(new wrappers_1.DeezerAlbum(x));
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (data_2_1 && !data_2_1.done && (_b = data_2.return)) yield _b.call(data_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        resolve(tempout);
                    }
                    //Playlist Wrapper
                    else if (type == 'playlist') {
                        let tempout = [];
                        try {
                            for (data_3 = __asyncValues(data); data_3_1 = yield data_3.next(), !data_3_1.done;) {
                                const x = data_3_1.value;
                                tempout.push(new wrappers_1.DeezerPlaylist(x));
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (data_3_1 && !data_3_1.done && (_c = data_3.return)) yield _c.call(data_3);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        resolve(tempout);
                    }
                    //Track Wrapper
                    else if (type == "track") {
                        let tempout = [];
                        try {
                            for (data_4 = __asyncValues(data); data_4_1 = yield data_4.next(), !data_4_1.done;) {
                                const x = data_4_1.value;
                                tempout.push(new wrappers_1.DeezerTrack(x));
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (data_4_1 && !data_4_1.done && (_d = data_4.return)) yield _d.call(data_4);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        resolve(tempout);
                    }
                }); })
                    .catch(reject);
            }
        });
    }
}
exports.Deezer = Deezer;
exports.DeezerWrappers = __importStar(require("./wrappers"));
