"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTubeTrack = exports.YouTubeArtist = exports.YouTubePlaylist = void 0;
const discord_ytdl_core_1 = __importDefault(require("discord-ytdl-core"));
const Base_1 = require("../Base");
class YouTubeArtist extends Base_1.Base {
    constructor(data) {
        super("youtube");
        this.raw = data;
        this.id = data.id;
        this.name = data.name;
        this.url = data.url;
        this.picture = data.icon.url;
    }
}
exports.YouTubeArtist = YouTubeArtist;
class YouTubePlaylist extends Base_1.Base {
    constructor(data) {
        super("youtube");
        this.raw = data;
        this.id = data.id;
        this.title = data.title;
        this.url = data.url;
        this.picture = data.thumbnail.url;
        this.size = this.raw.videos.length;
        this.publisher = new YouTubeArtist(data.channel);
        this.description = "No description.";
        this.tracks = () => {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var e_1, _a;
                let output = [];
                try {
                    for (var _b = __asyncValues(this.raw.videos), _c; _c = yield _b.next(), !_c.done;) {
                        const item = _c.value;
                        output.push(new YouTubeTrack(item));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                resolve(output);
            }));
        };
    }
}
exports.YouTubePlaylist = YouTubePlaylist;
class YouTubeTrack extends Base_1.Base {
    constructor(data) {
        super("youtube");
        this.raw = data;
        this.id = data.id;
        this.title = data.title;
        this.picture = data.thumbnail.url;
        this.url = data.url;
        this._DurationFormater = (data, isMs = true) => {
            if (isMs) {
                var ms = data % 1000;
                data = (data - ms) / 1000;
            }
            var secs = data % 60;
            data = (data - secs) / 60;
            var mins = data % 60;
            var hrs = (data - mins) / 60;
            return {
                full: data,
                ms: (isMs) ? data : (data * 1000),
                sec: secs,
                min: mins,
                hour: hrs,
                format: (hrs) ? `${hrs}:${mins}:${secs}` : `${mins}:${secs}`
            };
        };
        this.duration = this._DurationFormater(data.duration, true);
        this.stream = (ytdlParams) => {
            return (0, discord_ytdl_core_1.default)(this.url, ytdlParams !== null && ytdlParams !== void 0 ? ytdlParams : {
                filter: 'audioonly',
                quality: 'highestaudio',
                highWaterMark: 1 << 24
            });
        };
    }
}
exports.YouTubeTrack = YouTubeTrack;
