"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YoutubeWrappers = exports.YouTube = void 0;
const youtube_1 = require("../typings/youtube");
const utils_1 = require("./utils");
const youtube_sr_1 = require("youtube-sr");
const wrappers_1 = require("./wrappers");
class YouTube {
    constructor() {
        this.validator = utils_1.YouTubeValidator;
        this.extractor = utils_1.YouTubeExtractor;
    }
    handleSR(input, opts) {
        return {
            [youtube_1.ExtractedType.VIDEO]: this.searchVideo,
            [youtube_1.ExtractedType.ALL]: this.searchAll,
            [youtube_1.ExtractedType.PLAYLIST]: this.searchPlaylist,
            [youtube_1.ExtractedType.CHANNEL]: this.searchChannel
        }[opts.type](input, opts);
    }
    searchVideo(query, options) {
        return new Promise((resolve, reject) => {
            youtube_sr_1.YouTube.search(query, {
                type: youtube_1.ExtractedType.VIDEO,
                limit: options.limit
            })
                .then((searchResult) => { var searchResult_1, searchResult_1_1; return __awaiter(this, void 0, void 0, function* () {
                var e_1, _a;
                if (!('format' in options) || !options.format)
                    resolve(searchResult);
                else if (options.format) {
                    let output = [];
                    try {
                        for (searchResult_1 = __asyncValues(searchResult); searchResult_1_1 = yield searchResult_1.next(), !searchResult_1_1.done;) {
                            const item = searchResult_1_1.value;
                            output.push(new wrappers_1.YouTubeTrack(item));
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (searchResult_1_1 && !searchResult_1_1.done && (_a = searchResult_1.return)) yield _a.call(searchResult_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    resolve(output);
                }
            }); })
                .catch(reject);
        });
    }
    searchAll(query, options) {
        return new Promise((resolve, reject) => {
            youtube_sr_1.YouTube.search(query, {
                type: youtube_1.ExtractedType.ALL,
                limit: options.limit
            })
                .then((searchResult) => { var searchResult_2, searchResult_2_1; return __awaiter(this, void 0, void 0, function* () {
                var e_2, _a;
                if (!('format' in options) || !options.format)
                    resolve(searchResult);
                else if (options.format) {
                    let output = [];
                    try {
                        for (searchResult_2 = __asyncValues(searchResult); searchResult_2_1 = yield searchResult_2.next(), !searchResult_2_1.done;) {
                            const item = searchResult_2_1.value;
                            if (item instanceof youtube_sr_1.Video)
                                output.push(new wrappers_1.YouTubeTrack(item));
                            else if (item instanceof youtube_sr_1.Playlist)
                                output.push(new wrappers_1.YouTubePlaylist(item));
                            else if (item instanceof youtube_sr_1.Channel)
                                output.push(new wrappers_1.YouTubeArtist(item));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (searchResult_2_1 && !searchResult_2_1.done && (_a = searchResult_2.return)) yield _a.call(searchResult_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    resolve(output);
                }
            }); })
                .catch(reject);
        });
    }
    searchPlaylist(query, options) {
        return new Promise((resolve, reject) => {
            youtube_sr_1.YouTube.search(query, {
                type: youtube_1.ExtractedType.PLAYLIST,
                limit: options.limit
            })
                .then((searchResult) => { var searchResult_3, searchResult_3_1; return __awaiter(this, void 0, void 0, function* () {
                var e_3, _a;
                if (!('format' in options) || !options.format)
                    resolve(searchResult);
                else if (options.format) {
                    let output = [];
                    try {
                        for (searchResult_3 = __asyncValues(searchResult); searchResult_3_1 = yield searchResult_3.next(), !searchResult_3_1.done;) {
                            const item = searchResult_3_1.value;
                            output.push(new wrappers_1.YouTubePlaylist(item));
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (searchResult_3_1 && !searchResult_3_1.done && (_a = searchResult_3.return)) yield _a.call(searchResult_3);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    resolve(output);
                }
            }); })
                .catch(reject);
        });
    }
    searchChannel(query, options) {
        return new Promise((resolve, reject) => {
            youtube_sr_1.YouTube.search(query, {
                type: youtube_1.ExtractedType.CHANNEL,
                limit: options.limit
            })
                .then((searchResult) => { var searchResult_4, searchResult_4_1; return __awaiter(this, void 0, void 0, function* () {
                var e_4, _a;
                if (!('format' in options) || !options.format)
                    resolve(searchResult);
                else if (options.format) {
                    let output = [];
                    try {
                        for (searchResult_4 = __asyncValues(searchResult); searchResult_4_1 = yield searchResult_4.next(), !searchResult_4_1.done;) {
                            const item = searchResult_4_1.value;
                            output.push(new wrappers_1.YouTubeArtist(item));
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (searchResult_4_1 && !searchResult_4_1.done && (_a = searchResult_4.return)) yield _a.call(searchResult_4);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    resolve(output);
                }
            }); })
                .catch(reject);
        });
    }
    use(input, opts = {
        format: true,
        limit: 10,
        type: 'video'
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                if (!input)
                    reject(new Error(`input is invalid.`));
                if (this.validator(input)) {
                    const inputData = this.extractor(input);
                    switch (inputData.type) {
                        case "video":
                            youtube_sr_1.YouTube.getVideo(inputData.url)
                                .then(data => {
                                resolve([new wrappers_1.YouTubeTrack(data)]);
                            })
                                .catch(reject);
                            break;
                        case "playlist":
                            youtube_sr_1.YouTube.getPlaylist(inputData.url)
                                .then(data => {
                                resolve([new wrappers_1.YouTubePlaylist(data)]);
                            })
                                .catch(reject);
                            break;
                    }
                }
                else {
                    this.handleSR(input, opts)
                        .then(resolve)
                        .catch(reject);
                }
            });
        });
    }
}
exports.YouTube = YouTube;
exports.YoutubeWrappers = __importStar(require("./wrappers"));
