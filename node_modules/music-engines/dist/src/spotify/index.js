"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotifyWrappers = exports.Spotify = void 0;
const utils_1 = require("./utils");
const youtube_1 = require("../youtube");
const spotify_url_info_1 = require("spotify-url-info");
const wrappers_1 = require("./wrappers");
const wrappers_2 = require("../youtube/wrappers");
class Spotify {
    constructor() {
        this.validator = utils_1.SpotifyValidator;
        this.extractor = utils_1.SpotifyExtractor;
    }
    use(input) {
        return new Promise((resolve, reject) => {
            let validated = this.validator(input), extracted;
            if (validated) {
                extracted = this.extractor(input);
                switch (extracted.type) {
                    case "track":
                        (0, spotify_url_info_1.getData)(extracted.uri).then((trackData) => {
                            resolve(new wrappers_1.SpotifyTrack(trackData));
                        })
                            .catch(reject);
                        break;
                    case "artist":
                        (0, spotify_url_info_1.getData)(extracted.uri).then((trackData) => {
                            resolve(new wrappers_1.SpotifyArtist(trackData));
                        })
                            .catch(reject);
                        break;
                    case "album":
                        (0, spotify_url_info_1.getData)(extracted.uri).then((trackData) => {
                            resolve(new wrappers_1.SpotifyAlbum(trackData));
                        })
                            .catch(reject);
                        break;
                    case "playlist":
                        (0, spotify_url_info_1.getData)(extracted.uri).then((trackData) => {
                            resolve(new wrappers_1.SpotifyPlaylist(trackData));
                        })
                            .catch(reject);
                        break;
                }
            }
            else {
                const YouTubeInstance = new youtube_1.YouTube();
                YouTubeInstance.use(input, {
                    format: true,
                    limit: 5,
                    type: 'video'
                })
                    .then((res) => { var res_1, res_1_1; return __awaiter(this, void 0, void 0, function* () {
                    var e_1, _a;
                    let resolveOutput = [];
                    try {
                        for (res_1 = __asyncValues(res); res_1_1 = yield res_1.next(), !res_1_1.done;) {
                            const item = res_1_1.value;
                            if (item instanceof wrappers_2.YouTubeTrack)
                                resolveOutput.push(item);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (res_1_1 && !res_1_1.done && (_a = res_1.return)) yield _a.call(res_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    resolve(resolveOutput);
                }); })
                    .catch(reject);
            }
        });
    }
}
exports.Spotify = Spotify;
exports.SpotifyWrappers = __importStar(require("./wrappers"));
