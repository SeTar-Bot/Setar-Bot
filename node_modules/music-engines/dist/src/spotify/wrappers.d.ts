import { SPAlbum, SPArtist, SPPlaylist, SPTrack } from "../typings/spotify";
import { DurationType } from "../typings/base";
import { opus, FFmpeg } from "prism-media";
import { downloadOptions } from "ytdl-core";
import { Base } from "../Base";
declare class SpotifyTrack extends Base implements SPTrack {
    readonly picture: string;
    readonly id: string;
    readonly url: string;
    readonly title: string;
    readonly duration: DurationType;
    private raw;
    constructor(data: any);
    _DurationFormater(data: number, isMs: boolean): DurationType;
    stream(ytdlParams?: downloadOptions): Promise<opus.Encoder | FFmpeg>;
}
declare class SpotifyAlbum extends Base implements SPAlbum {
    readonly picture: string;
    readonly id: string;
    readonly url: string;
    readonly title: string;
    readonly releaseDate: string;
    private raw;
    constructor(data: any);
    artists(): Promise<SpotifyArtist | SpotifyArtist[]>;
    tracks(): Promise<SpotifyTrack | SpotifyTrack[]>;
}
declare class SpotifyArtist extends Base implements SPArtist {
    readonly picture: string;
    readonly id: string | Number;
    readonly url: string;
    readonly name: string;
    readonly socials?: any;
    private raw;
    constructor(data: any);
    tracks(): Promise<SpotifyTrack[]>;
}
declare class SpotifyPlaylist extends Base implements SPPlaylist {
    readonly id: string;
    readonly title: string;
    readonly description: string;
    readonly size: Number;
    readonly url: string;
    readonly picture: string;
    readonly publisher?: any;
    private raw;
    constructor(data: any);
    tracks(): Promise<SpotifyTrack[]>;
}
export { SpotifyAlbum, SpotifyArtist, SpotifyPlaylist, SpotifyTrack };
