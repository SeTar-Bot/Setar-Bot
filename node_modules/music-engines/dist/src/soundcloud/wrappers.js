"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoundCloudPlaylist = exports.SoundCloudArtist = exports.SoundCloudTrack = void 0;
const soundcloud_scraper_1 = require("soundcloud-scraper");
const Base_1 = require("../Base");
const client = new soundcloud_scraper_1.Client();
class SoundCloudTrack extends Base_1.Base {
    constructor(data) {
        super("soundcloud");
        this.raw = data;
        this.id = data.id;
        this.title = data.title;
        this.picture = data.thumbnail;
        this.url = data.url;
        this.duration = this._DurationFormater(data.duration);
    }
    _DurationFormater(data, isMs = true) {
        if (isMs) {
            var ms = data % 1000;
            data = (data - ms) / 1000;
        }
        var secs = data % 60;
        data = (data - secs) / 60;
        var mins = data % 60;
        var hrs = (data - mins) / 60;
        return {
            full: data,
            ms: (isMs) ? data : (data * 1000),
            sec: secs,
            min: mins,
            hour: hrs,
            format: (hrs) ? `${hrs}:${mins}:${secs}` : `${mins}:${secs}`
        };
    }
    artist() {
        return new Promise((resolve, reject) => {
            client.getUser(this.raw.author.username)
                .then(data => {
                resolve(new SoundCloudArtist(data));
            })
                .catch(reject);
        });
    }
    stream() {
        return new Promise((resolve, reject) => {
            this.raw.downloadProgressive()
                .then(resolve)
                .catch(reject);
        });
    }
}
exports.SoundCloudTrack = SoundCloudTrack;
class SoundCloudArtist extends Base_1.Base {
    constructor(data) {
        super("soundcloud");
        this.raw = data;
        this.id = data.username;
        this.name = data.name;
        this.picture = data.avatarURL;
        this.url = data.profile;
    }
    tracks() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            let output = [];
            try {
                for (var _b = __asyncValues(this.raw.tracks), _c; _c = yield _b.next(), !_c.done;) {
                    const track = _c.value;
                    client.getSongInfo(track.url)
                        .then(trackData => {
                        output.push(new SoundCloudTrack(trackData));
                    })
                        .catch(reject);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            resolve(output);
        }));
    }
}
exports.SoundCloudArtist = SoundCloudArtist;
class SoundCloudPlaylist extends Base_1.Base {
    constructor(data) {
        super("soundcloud");
        this.raw = data;
        this.id = data.id;
        this.title = data.title;
        this.url = data.url;
        this.description = data.description;
        this.picture = data.thumbnail;
        this.size = data.trackCount;
    }
    tracks() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var e_2, _a;
            const output = [];
            try {
                for (var _b = __asyncValues(this.raw.tracks), _c; _c = yield _b.next(), !_c.done;) {
                    const track = _c.value;
                    output.push(new SoundCloudTrack(track));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            resolve(output);
        }));
    }
    publisher() {
        return new Promise((resolve, reject) => {
            client.getUser(this.raw.author.username)
                .then(x => {
                resolve(new SoundCloudArtist(x));
            })
                .catch(reject);
        });
    }
}
exports.SoundCloudPlaylist = SoundCloudPlaylist;
